import java.util.*;
// Spreadsheet Cells can be one of three different kinds:
// - Formulas always start with the = sign.  If the 0th character in
//   contents is a '=', use the method
//     FNode root = FNode.parseFormulaString(contents);
//   to create a formula tree of FNodes for later use.
// - Numbers can be parsed as doubles using the
//   Double.parseDouble(contents) method.  
// - Strings are anything else aside from Formulas and Numbers and
//   store only the contents given.
//
// Cells are largely immutable: once the contents of a cell are set,
// they do not change except to reflect movement of upstream dependent
// cells in a formula.  The value of a formula cell may change after
// if values change in its dependent cells. To make changes in a
// spreadsheet, one will typically create a new Cell with different
// contents using the method
//   newCell = Cell.make(contents);
//
// This class may contain nested static subclasses to implement the
// differnt kinds of cells.
public class Cell {
  protected  String s;
  protected  Double val;
  protected  String contents;
  protected  String state;
  protected String untouchedContents;
  protected FNode treeRoot;
  protected Map<String,Cell> m = new HashMap<String,Cell>();
  // Factory method to create cells with the given contents linked to
  // the given spreadsheet.  The method is static so that one invokes it with:
  // 
  //   Cell c = Cell.make("=A21*2");
  //
  // The return value may be a subclass of Cell which is not possible
  // with constructors.  Call trim() on the contents string to remove
  // whitespace at the beginning and end.  If the contents is null or
  // empty, return null.  If contents is not valid, a RuntimeException
  // is generated.
  //
  // If the cell is a formula, it is not possible to evaluate its
  // formula during Cell.make() as other references to other cells
  // cannot be resolved.  The formula can only be reliably evaluated
  // after a call to cell.updateValue(cellMap) is made later.  Until
  // that time the cell should be in the ERROR state with
  // cell.isError() == true and displayString() == "ERROR" and
  // cell.numberValue() == null.
  private Cell(String contents){
    String g = contents.trim();
    this.untouchedContents = g;
    this.contents = g;
    // System.out.println(g);
    try{
      Double x = Double.parseDouble(contents);
      this.val = x;
      this.state = "NOTERROR";
    }
    catch(NumberFormatException e){
      if(g.charAt(0) == '='){
        this.state = "ERROR";
        this.treeRoot = FNode.parseFormulaString(contents);
      }
      else{
        this.state = "NOTERROR";
        this.s = contents;
      }
    }    
  }
  
  public static Cell make(String contents){
    if(contents == null || contents.equals("")){
      return null;
    }
    Cell c = new Cell(contents);
    Map<String,Cell> emptycellMap = new HashMap<String,Cell>();
    c.updateValue(emptycellMap);
    return c;
  }
  
  
  // Return the kind of the cell which is one of "string", "number",
  // or "formula".
  public String kind(){
    Double throwval;
    try{
      throwval = Double.parseDouble(contents);
      return "number";
    }
    catch(Exception e){
      if(contents.charAt(0) == '='){
        return "formula"; 
      }
      else{
        return "string"; 
      }
    }    
  }   
  
  
  // Returns whether the cell is currently in an error state. Cells
  // with kind() "string" and "number" are never in error.  Formula
  // cells are in error and show ERROR if their formula involves cells
  // which are blank or have kind "string" and therefore cannot be
  // used to calculate the value of the cell.
  
  public boolean isError(){
    if(state.equals("ERROR")){
      return true;
    }
    return false;
  }
  
  // Produce a string to display the contents of the cell.  For kind()
  // "string" and "number", this method returns the original contents
  // of the cell.  For formula cells which are in error, return the
  // string "ERROR".  Formula cells which are not in error return a
  // string of their numeric value with 1 decimal digit of accuracy
  // which is easiest to produce with the String.format() method.
  //
  // Target Complexity: O(1)
  // Avoid repeated formula evaluation by traversing the formula tree
  // only in updateFormulaValue()
  
  public String displayString(){
    if(this.kind().equals("number")){
      String result = String.format("%.1f", Double.parseDouble(contents));
      return result; 
    }
    else if(this.kind().equals("string")){
      return contents; 
    }
    if(isError() == false){
      //  System.out.println(val);
      double x = (double)Math.round(val * 10d) / 10d;
      //  System.out.println(x);
      String temp = ""+x;
      return temp; 
    }
    return "ERROR";
  }
  
  // Return the numeric value of this cell.  If the cell is kind
  // "number", this is the double value of its contents.  For kind
  // "formula", it is the evaluated value of the formula.  For kind
  // "string" return null.
  //
  // Target Complexity: O(1)
  // Avoid repeated formula evaluation by traversing the formula tree
  // only in updateFormulaValue()
  
  
  public Double numberValue(){
    if(this.kind().equals("number")){
      return val; 
    }
    else if(this.kind().equals("string")){
      return null; 
    }
// nee
    if(isError() == true){
      return null; 
    }
    return val;
  }
  
  // Return the raw contents of the cell. For kind() "number" and
  // "string", this is the original contents entered into the cell.
  // For kind() "formula", this is the text of the formula.
  //
  // Target Complexity: O(1)
  
  public String contents(){
    return untouchedContents;
  }
  
  // Update the value of the cell value. If the cell is not a formula
  // (string and number), do nothing.  Formulas should re-evaluate the
  // stored formula tree to determine a numeric value.  This method
  // may be called when the cell is initially created to give it a
  // numeric value in which case an empty map should be used.
  // Whenever an upstream cell changes value, the housing spreadsheet
  // will call this method to recompute the numeric value to reflect
  // the change.  This method should not raise any exceptions if there
  // are problems evaluating the formula due to other unusable cells.
  // It should set the state of this cell to be in error so that a
  // call to isError() returns true.  If the cell formula is
  // successfully evaluated, isError() should return false.
  //
  // Target Complexity: 
  //   O(1) for "number" and "string" cells
  //   O(T) for "formula" nodes where T is the number of nodes in the
  //        formula tree
  
  public void updateValue(Map<String,Cell> cellMap){
    if(this.kind().equals("number") || this.kind().equals("string")){
      return; 
    }
    
    try{
      val = evalFormulaTree(treeRoot,cellMap);
      contents = "="+Double.toString(val);
      state = "NOTERROR";
    }
    catch (EvalFormulaException e){
      state="ERROR";
    }
    catch (Exception e){
      state="ERROR";
    }
  }
  
  // A simple class to reflect problems evaluating a formula tree.
  public static class EvalFormulaException extends RuntimeException{
    
    public EvalFormulaException(String msg){
      super(msg); 
    }
    
  }
  
  // Recursively evaluate the formula tree rooted at the given
  // node. Return the computed value.  Use the given map to retrieve
  // the number value of cells which appear in the formula.  If any
  // cell ID in the formula is unusable (blank, error, string), this
  // method raises an EvalFormulaException.  
  // 
  // This method is public and static to allow for testing independent
  // of any individual cell but should be used in the
  // updateFormulaValue() method to allow individual cells to compute
  // their formula values.
  //
  // Inspect the FNode and TokenType classes to gain insight into what
  // information is available in FNodes to inspect during the
  // post-order traversal for evaluation.
  // 
  // Target Complexity: O(T) 
  //   T: the number of nodes in the formula tree
  public static Double evalFormulaTree(FNode node, Map<String,Cell> cellMap){
    if(node.type == TokenType.CellID){
      Cell temp = cellMap.get(node.data);
      if(temp == null){
        throw new  EvalFormulaException("Not possible");
      }
      if(node.type == TokenType.Number){
        return Double.parseDouble(node.data); 
      }
      
    }
    return postOrder(node, cellMap);
    
    
  }
  public static double postOrder(FNode t, Map<String,Cell> cellMap){
    double s = 0;
    double g = 0;
    double x = 0;
    if(t != null){
      s = postOrder(t.left, cellMap);
      g = postOrder(t.right, cellMap);
      //System.out.println(t.data);
      if(t.type == TokenType.Number){
        return Double.parseDouble(t.data);
      }
      if(t.type == TokenType.CellID){
        
        Cell temp = cellMap.get(t.data);

        if(temp == null){
          throw new  EvalFormulaException("Not possible");
        }
        if(temp.kind().equals("string")){
          throw new  EvalFormulaException("Not possible");
        }
        if(temp.kind().equals("formula")){
         temp.updateValue(cellMap); 
        }
        
        return temp.numberValue();
      }
      if(t.data.equals("+")){
        return(s+g); 
      }
      else if(t.data.equals("-")){
        return(s-g); 
      }
      else if(t.data.equals("*")){
        return(s*g); 
      }
      else if(t.data.equals("/")){
        return(s/g); 
      }
      else if(t.data.equals("negate")){
        return(-s+g); 
      }
      return(s+Double.parseDouble(t.data));
    }
    
    return(x);
  }
  
  // Return a set of upstream cells from this cell. Cells of kind
  // "string" and "number" return an empty set.  Formula cells are
  // dependent on the contents of any cell whose ID appears in the
  // formula and returns all such ids in a set.  For formula cells,
  // this method should call a recursive helper method to traverse the
  // formula tree and accumulate a set of ids in the formula tree.
  // 
  // Target Complexity: O(1)
  // Avoid repeated formula evaluation by traversing the formula tree
  // only in updateFormulaValue()
  public Set<String> getUpstreamIDs(){
    HashSet<String> s = new HashSet<String>();
    if(this.kind().equals("number") || this.kind().equals("string")){
      return s; 
    }
    return recursiveIDs(treeRoot,s); 
  }
  public Set<String> recursiveIDs(FNode t, HashSet<String> h){
    if(t != null){
      recursiveIDs(t.left, h);
      recursiveIDs(t.right, h);
      if(t.type == TokenType.CellID){
        h.add(t.data);
      }
      
      
    }
    return(h);
  }
  
}