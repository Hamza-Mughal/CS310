import java.util.*;
public class DAG{
protected Map<String,Set<String>> upStreamMap;
protected Map<String,Set<String>> downStreamMap;
  // Construct an empty DAG
public DAG(){
 this.upStreamMap = new HashMap<String,Set<String>>();
 this.downStreamMap = new HashMap<String,Set<String>>();
}
public static Set<String> toSet(String... args){
    Set<String> set = new HashSet<String>();
    for(String s : args){
      set.add(s);
    }
    return set;
  }

  // Produce a string representaton of the DAG which shows the
  // upstream and downstream links in the graph.  The format should be
  // as follows:
  //
  // Upstream Links:
  //   A1 : [E1, F2, C1]
  //   C1 : [E1, F2]
  //  BB8 : [D1, C1, RU37]
  // RU37 : [E1]
  // Downstream Links:
  //   E1 : [A1, C1, RU37]
  //   F2 : [A1, C1]
  //   D1 : [BB8]
  // RU37 : [BB8]
  //   C1 : [A1, BB8]
public String toString(){
  String s = "Upstream Links:\n";
  for(String key : upStreamMap.keySet()){
        Set<String> smap = new HashSet<String>();
    smap = upStreamMap.get(key);
    List<String> list = new ArrayList<String>(smap);
    if(list.isEmpty() == true){continue;}
    s+=String.format("%4s",key);
    s+=" : ";
    s+=list + "\n";
  }
  s+="Downstream Links:\n";
  for(String key : downStreamMap.keySet()){
        Set<String> smap = new HashSet<String>();
    smap = downStreamMap.get(key);
    List<String> list = new ArrayList<String>(smap);
    if(list.isEmpty() == true){continue;}
    s+=String.format("%4s",key);
    s+=" : ";
    s+=list + "\n";
  }  
  return s;
}

  // Return the upstream links associated with the given ID.  If there
  // are no links associated with ID, return the empty set.
  //
  // TARGET COMPLEXITY: O(1)
public Set<String> getUpstreamLinks(String id){
  if(upStreamMap.containsKey(id)){
   return upStreamMap.get(id);}
     Set<String> empty = new HashSet<String>();
     return empty;
}

  // Return the downstream links associated with the given ID.  If
  // there are no links associated with ID, return the empty set.
  //
  // TARGET COMPLEXITY: O(1)
public Set<String> getDownstreamLinks(String id){
  if(downStreamMap.containsKey(id)){
   return downStreamMap.get(id);}
     Set<String> empty = new HashSet<String>();
     return empty;
}

  // Class representing a cycle that is detected on adding to the
  // DAG. Raised in checkForCycles(..) and add(..).
  public static class CycleException extends RuntimeException{
    public CycleException(String msg){
      super(msg);
    }
  }

  // Add a node to the DAG with the provided set of upstream links.
  // Add the new node to the downstream links of each upstream node.
  // If the upstreamIDs argument is either null or empty, remove the
  // node with the given ID.
  //
  // After adding the new node, check whether it has created any
  // cycles through use of the checkForCycles() method.  If a cycle is
  // created, revert the DAG back to its original form so it appears
  // there is no change and raise a CycleException with a message
  // showing the cycle that would have resulted from the addition.
  // 
  // TARGET RUNTIME COMPLEXITY: O(N + L)
  // MEMORY OVERHEAD: O(P)
  //   N : number of nodes in the DAG
  //   L : number of upstream links in the DAG
  //   P : longest path in the DAG starting from node id
  public void add(String id, Set<String> upstreamIDs){
    Set<String> oldupLinks = getUpstreamLinks(id);
    remove(id);
    upStreamMap.put(id, upstreamIDs);
    for(String s : upstreamIDs){
     if(downStreamMap.containsKey(s)){ // check to see if adding element to current value in hashMap
        Set<String> h = downStreamMap.get(s);
        (h).add(id);
        continue;
      }
     downStreamMap.put(s, new HashSet<String>());
     downStreamMap.get(s).add(id);
    }
    List<String> path = new ArrayList<String>();
    path.add(id);
    boolean flag = checkForCycles(upStreamMap, path);
    if(flag == true){
      add(id, oldupLinks);
      throw new CycleException(path.toString());
  }
  }

  
  

  // Determine if there is a cycle in the graph represented in the
  // links map.  List curPath is the current path through the graph,
  // the last element of which is the current location in the graph.
  // This method should do a recursive depth-first traversal of the
  // graph visiting each neighbor of the current element. Each
  // neighbor should be checked to see if it equals the first element
  // in curPath in which case there is a cycle.
  //
  // This method should return true if a cycle is found and curPath
  // should be left to contain the cycle that is found.  Return false
  // if no cycles exist and leave the contents of curPath as they were
  // originally.
  //
  // The method should be used during add(..) which will initialize
  // curPath to the new node being added and use the upstream links as
  // the links passed in.
  public static boolean checkForCycles(Map<String, Set<String>> links, List<String> curPath){
    String lastNode = curPath.get(curPath.size()-1);
    Set<String> neighbors = links.get(lastNode);
    if(neighbors == null || neighbors.isEmpty() == true){
      return false;
    }
    for(String g : neighbors){
      curPath.add(g);
      if(curPath.get(0).equals(g)){
       return true; 
      }
      boolean flag = checkForCycles(links, curPath);
      if(flag == true){
       return true; 
      }
      curPath.remove(curPath.size()-1);
    }
    return false;
  }

  // Remove the given id by eliminating it from the downstream links
  // of other ids and eliminating its upstream links.  If the ID has
  // no upstream dependencies, do nothing.
  //
  // TARGET COMPLEXITY: O(L_i)
  //   L_i : number of upstream links node id has
  public void remove(String id){
    if(getUpstreamLinks(id).isEmpty() == true){
     return; 
    }
    upStreamMap.remove(id);
    for (String key : downStreamMap.keySet()){
      if(downStreamMap.get(key).contains(id)){
       downStreamMap.get(key).remove(id); 
      }
    }
//    Map<String,Set<String>> newdownStreamMap = new HashMap<String,Set<String>>(downStreamMap);
//     for(String s : downStreamMap.keySet()){ 
//      if(getDownstreamLinks(s).isEmpty() == true){ 
//       newdownStreamMap.remove(s);
//      }
 // }
 //    downStreamMap = newdownStreamMap;
}
}